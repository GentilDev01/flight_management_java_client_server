/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import Service.EmployeeService;
import java.awt.print.PrinterException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.OrientationRequested;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.Employee;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author ingab
 */
public class EmployeeForm extends javax.swing.JInternalFrame {

    DefaultTableModel tableModel = new DefaultTableModel();

    /**
     * Creates new form EmployeeForm
     */
    private String correctOtp;

    public EmployeeForm() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        try {
            Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);

            EmployeeService service = (EmployeeService) theregistry.lookup("employee");
            empIdTxt.setText(service.AutoEmployee_id());
        } catch (Exception e) {
        }
        addTableColumnsHeaderEmployee();
        addTableRowDataEmployee();
    }

    private void addTableColumnsHeaderEmployee() {
        tableModel.addColumn("EmployeeId");
        tableModel.addColumn("fname");
        tableModel.addColumn("lname");
        tableModel.addColumn("gender");
        tableModel.addColumn("phone");
        tableModel.addColumn("Email");
        tableModel.addColumn("Password");
        tableModel.addColumn("role");
        EmployeeTable.setModel(tableModel);
    }

    private void addTableRowDataEmployee() {
        tableModel.setRowCount(0);
        try {
            Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);

            EmployeeService service = (EmployeeService) theregistry.lookup("employee");

            List<Employee> employees = new ArrayList<>();
            employees = service.retrieveEmployees();
            for (Employee theEmployee : employees) {
                tableModel.addRow(new Object[]{
                    theEmployee.getEmp_id(),
                    theEmployee.getFname(),
                    theEmployee.getLname(),
                    theEmployee.getGender(),
                    theEmployee.getPhoneNo(),
                    theEmployee.getUsername(),
                    theEmployee.getPassword(),
                    theEmployee.getRole()
                });
            }

        } catch (Exception e) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        searchId = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        EmpId = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        phone = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        fnameTxt = new javax.swing.JTextField();
        lnameTxt = new javax.swing.JTextField();
        phoneTxt = new javax.swing.JTextField();
        s = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        roleTxt = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        genderComboTxt = new javax.swing.JComboBox<String>();
        passwdTxt = new javax.swing.JPasswordField();
        usernameTxt = new javax.swing.JTextField();
        empIdTxt = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        EmployeeTable = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        searchIdTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        registerBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1100, 670));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);

        searchId.setBackground(new java.awt.Color(0, 102, 102));
        searchId.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        searchId.setForeground(new java.awt.Color(0, 51, 255));
        searchId.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Employee Management");
        searchId.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 480, -1));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 255), java.awt.Color.white));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        EmpId.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        EmpId.setForeground(new java.awt.Color(255, 255, 255));
        EmpId.setText("Employee ID :");
        jPanel2.add(EmpId, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, 20));

        jLabel16.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("First Name");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 142, -1, -1));

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Last Name");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 187, -1, -1));

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Gender");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 234, -1, -1));

        phone.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        phone.setForeground(new java.awt.Color(255, 255, 255));
        phone.setText("Phone No: ");
        jPanel2.add(phone, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 284, -1, -1));

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Email Of Admin");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 344, -1, -1));

        fnameTxt.setBackground(new java.awt.Color(0, 102, 102));
        fnameTxt.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(fnameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 138, 182, -1));

        lnameTxt.setBackground(new java.awt.Color(0, 102, 102));
        lnameTxt.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(lnameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 183, 182, -1));

        phoneTxt.setBackground(new java.awt.Color(0, 102, 102));
        phoneTxt.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(phoneTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 280, 182, -1));

        s.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        s.setForeground(new java.awt.Color(255, 255, 255));
        s.setText("Password");
        jPanel2.add(s, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 402, -1, -1));

        jLabel22.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("Role");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 470, -1, -1));

        jLabel23.setText("Nationality");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 599, -1, -1));

        roleTxt.setBackground(new java.awt.Color(0, 102, 102));
        roleTxt.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(roleTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 466, 182, -1));
        jPanel2.add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(235, 593, 128, -1));

        genderComboTxt.setBackground(new java.awt.Color(0, 102, 102));
        genderComboTxt.setForeground(new java.awt.Color(0, 102, 102));
        genderComboTxt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "F", "M" }));
        jPanel2.add(genderComboTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 230, 79, -1));

        passwdTxt.setBackground(new java.awt.Color(0, 102, 102));
        passwdTxt.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(passwdTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 398, 182, -1));

        usernameTxt.setBackground(new java.awt.Color(0, 102, 102));
        usernameTxt.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(usernameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 340, 182, -1));

        empIdTxt.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        empIdTxt.setForeground(new java.awt.Color(255, 255, 255));
        empIdTxt.setText("XXXXX");
        jPanel2.add(empIdTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 120, -1));

        searchId.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 400, 540));

        EmployeeTable.setBackground(new java.awt.Color(0, 102, 102));
        EmployeeTable.setForeground(new java.awt.Color(255, 255, 255));
        EmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        EmployeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(EmployeeTable);

        searchId.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, 560, 490));

        searchBtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(204, 0, 0));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        searchId.add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 600, 110, 40));
        searchId.add(searchIdTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 600, 360, 40));

        registerBtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        registerBtn.setForeground(new java.awt.Color(204, 51, 0));
        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });
        jPanel1.add(registerBtn);

        deleteBtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(204, 51, 0));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        jPanel1.add(deleteBtn);

        updateBtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(204, 51, 0));
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        jPanel1.add(updateBtn);

        resetBtn.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        resetBtn.setForeground(new java.awt.Color(204, 51, 0));
        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });
        jPanel1.add(resetBtn);

        searchId.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 620, 390, 40));

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        searchId.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 20, 170, 40));

        jScrollPane1.setViewportView(searchId);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 1100, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        // TODO add your handling code here:
        if (fnameTxt.getText().trim().isEmpty() || lnameTxt.getText().trim().isEmpty() || passwdTxt.getPassword().length == 0
                || phoneTxt.getText().trim().isEmpty() || usernameTxt.getText().trim().isEmpty() || roleTxt.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Fill All Fields", "Empty Fields", JOptionPane.ERROR_MESSAGE);
            resetBtnActionPerformed(evt);
        } else {
            // Initialize the Employee object
            Employee emp = new Employee();

            // Generate and send OTP
            String correctOtp = generateOtp();
            String userEmail = usernameTxt.getText();
            sendOtp(userEmail, correctOtp);
            JOptionPane.showMessageDialog(this, "OTP sent to " + userEmail);

            // Prompt the user to enter the OTP
            String enteredOtp = JOptionPane.showInputDialog(this, "Enter the OTP sent to your email:", "OTP Verification", JOptionPane.PLAIN_MESSAGE);

            // Validate the OTP
            if (correctOtp.equals(enteredOtp)) {
                try {
                    // Connect to the registry and lookup the service
                    Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);
                    EmployeeService service = (EmployeeService) theregistry.lookup("employee");

                    // Set the Employee details
                    emp.setEmp_id(service.AutoEmployee_id());
                    emp.setFname(fnameTxt.getText());
                    emp.setLname(lnameTxt.getText());
                    emp.setGender(genderComboTxt.getSelectedItem().toString());
                    emp.setPhoneNo(phoneTxt.getText());
                    emp.setUsername(usernameTxt.getText());
                    emp.setPassword(new String(passwdTxt.getPassword()));
                    emp.setRole(roleTxt.getText());

                    // Register the employee
                    String feedback = service.registerEmployee(emp);

                    // Provide feedback to the user
                    JOptionPane.showMessageDialog(this, feedback, "Feedback", JOptionPane.INFORMATION_MESSAGE);

                    // Update the table and reset fields
                    addTableRowDataEmployee();
                    resetBtnActionPerformed(evt);
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "An error occurred during registration. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Invalid OTP. Please try again.", "Invalid OTP", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String generateOtp() {
        // Generate a 6-digit numeric OTP
        Random random = new Random();
        int otpValue = 100000 + random.nextInt(900000);
        return String.valueOf(otpValue);
    }

    private void sendOtp(String recipientEmail, String otp) {
        // Set up SMTP properties
        Properties properties = new Properties();
        properties.put("mail.smtp.host", "smtp.gmail.com");
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");

        // Authentication with Gmail
        String fromEmail = "entilniyo@gmail.com"; // Your Gmail address
        String appPassword = "lcmg ijnq qjod yyjs"; // Your App Password

        // Create a session with authentication
        Session session = Session.getInstance(properties, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(fromEmail, appPassword);
            }
        });

        try {
            // Create the email message
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(fromEmail));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
            message.setSubject("Your OTP");
            message.setText("Your one-time password (OTP) from Gentil is: " + otp);

            // Send the email
            Transport.send(message);
            System.out.println("OTP sent successfully to " + recipientEmail);

        } catch (MessagingException ex) {
            ex.printStackTrace();
            System.out.println("Error sending OTP to " + recipientEmail + ": " + ex.getMessage());
            JOptionPane.showMessageDialog(null, "Failed to send OTP. Please try again later.", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_registerBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        try {
            Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);

            EmployeeService service = (EmployeeService) theregistry.lookup("employee");
            empIdTxt.setText(service.AutoEmployee_id());
        } catch (Exception e) {
        }

        fnameTxt.setText("");
        lnameTxt.setText("");
        genderComboTxt.setSelectedIndex(-1);
        phoneTxt.setText("");
        usernameTxt.setText("");
        passwdTxt.setText("");
        roleTxt.setText("");
        registerBtn.setEnabled(true);

    }//GEN-LAST:event_resetBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        if (fnameTxt.getText().trim().isEmpty() || lnameTxt.getText().trim().isEmpty() || passwdTxt.getPassword().length == 0
                || phoneTxt.getText().trim().isEmpty() || usernameTxt.getText().trim().isEmpty() || roleTxt.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Fill All Fields", "Empty Fields", JOptionPane.ERROR_MESSAGE);
            resetBtnActionPerformed(evt);
        } else {
        // You may want to add more validation logic here if needed

            Employee emp = new Employee();
            emp.setEmp_id(empIdTxt.getText());
            emp.setFname(fnameTxt.getText());
            emp.setLname(lnameTxt.getText());
            emp.setGender(genderComboTxt.getSelectedItem().toString());
            emp.setPhoneNo(phoneTxt.getText());
            emp.setUsername(usernameTxt.getText());
            emp.setPassword(new String(passwdTxt.getPassword()));
            emp.setRole(roleTxt.getText());
            try {
                Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);

                EmployeeService service = (EmployeeService) theregistry.lookup("employee");

                String feedback = service.updateEmployee(emp);
                if (feedback.equalsIgnoreCase("Employee Updated Successfully")) {
                    JOptionPane.showMessageDialog(this, feedback, "Feedback", JOptionPane.INFORMATION_MESSAGE);
                    addTableRowDataEmployee();
                    resetBtnActionPerformed(evt);
                } else {
                    JOptionPane.showMessageDialog(this, feedback, "Feedback", JOptionPane.ERROR_MESSAGE);
                    addTableRowDataEmployee();
                    resetBtnActionPerformed(evt);
                }
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        Employee employee = new Employee();
        try {
            Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);

            EmployeeService service = (EmployeeService) theregistry.lookup("employee");

            String id = service.AutoEmployee_id();
            employee.setEmp_id(empIdTxt.getText());

            if (id.equals(empIdTxt.getText())) {
                JOptionPane.showMessageDialog(this, "Please First Search For the Id", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm ", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) {
                    String feedback = service.deleteEmployee(employee);
                    JOptionPane.showMessageDialog(this, feedback, "Result", JOptionPane.INFORMATION_MESSAGE);
                    addTableRowDataEmployee();
                }
                resetBtnActionPerformed(evt);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        try {
            if (searchIdTxt.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please Enter Id ", "Empty Field", JOptionPane.ERROR_MESSAGE);
            } else if (searchIdTxt.getText().length() != 5) {
                JOptionPane.showMessageDialog(this, "Id must be 5 characters ", "Length of Id Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Assuming Employee is your model class
                Employee employee = new Employee();
                Registry theregistry = LocateRegistry.getRegistry("127.0.0.1", 6000);

                EmployeeService service = (EmployeeService) theregistry.lookup("employee");

                employee.setEmp_id(searchIdTxt.getText());
                employee = service.searchEmployee(employee);

                if (employee == null) {
                    JOptionPane.showMessageDialog(this, "Id does not Exist", "Result", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    // Populate data from the model to the text fields
                    empIdTxt.setText(employee.getEmp_id());
                    fnameTxt.setText(employee.getFname());
                    lnameTxt.setText(employee.getLname());
                    genderComboTxt.setSelectedItem(employee.getGender());
                    phoneTxt.setText(employee.getPhoneNo());
                    usernameTxt.setText(employee.getUsername());
                    passwdTxt.setText(employee.getPassword());
                    roleTxt.setText(employee.getRole());

                    registerBtn.setEnabled(false);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void EmployeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeTableMouseClicked
        // TODO add your handling code here:
        int i = EmployeeTable.getSelectedRow();
        TableModel model = EmployeeTable.getModel();

        empIdTxt.setText(model.getValueAt(i, 0).toString());
        fnameTxt.setText(model.getValueAt(i, 1).toString());
        lnameTxt.setText(model.getValueAt(i, 2).toString());
        genderComboTxt.setSelectedItem(model.getValueAt(i, 3).toString());
        phoneTxt.setText(model.getValueAt(i, 4).toString());
        usernameTxt.setText(model.getValueAt(i, 5).toString());
        passwdTxt.setText(model.getValueAt(i, 6).toString());
        roleTxt.setText(model.getValueAt(i, 7).toString());

        registerBtn.setEnabled(false);

    }//GEN-LAST:event_EmployeeTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MessageFormat header1 = new MessageFormat("Employee Management Report 2024 May");
    
    MessageFormat footer = new MessageFormat("End");

    try {
        // Set up the print request attributes
        PrintRequestAttributeSet set = new HashPrintRequestAttributeSet();
        set.add(OrientationRequested.PORTRAIT);

        // Print the table with combined header and footer
        boolean complete = EmployeeTable.print(JTable.PrintMode.FIT_WIDTH, header1, footer, true, set, true);
        if (complete) {
            System.out.println("Printing complete");
        } else {
            System.out.println("Printing cancelled");
        }
    } catch (PrinterException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EmpId;
    private javax.swing.JTable EmployeeTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel empIdTxt;
    private javax.swing.JTextField fnameTxt;
    private javax.swing.JComboBox<String> genderComboTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField lnameTxt;
    private javax.swing.JPasswordField passwdTxt;
    private javax.swing.JLabel phone;
    private javax.swing.JTextField phoneTxt;
    private javax.swing.JButton registerBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextField roleTxt;
    private javax.swing.JLabel s;
    private javax.swing.JButton searchBtn;
    private javax.swing.JPanel searchId;
    private javax.swing.JTextField searchIdTxt;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField usernameTxt;
    // End of variables declaration//GEN-END:variables
}
